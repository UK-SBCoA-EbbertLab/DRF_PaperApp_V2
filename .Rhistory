pdf("DarkMAPQ_Reference.pdf", width=4, height=3)
p
dev.off()
26842346/206689498
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(ggplot2)
library(ComplexHeatmap)
library(RIdeogram)
library(wordcloud2)
chm13RefSize = read.table("../../../CHM13PaperFigures/referenceSizes/CHM13.chromSizes.txt", header=F,sep="\t")
chm13RefSize[which(chm13RefSize$V1 == "chrM"), "V1"] = "chrMT"
hg38RefSize = read.table("../../../CHM13PaperFigures/referenceSizes/hg38.assembledOnly.chrom.sizes", header=F,sep="\t")
hg38RefSize[which(hg38RefSize$V1 == "chrM"), "V1"] = "chrMT"
hg19RefSize = read.table("../../../CHM13PaperFigures/referenceSizes/hg19.assembledOnly.chrom.sizes", header=F,sep="\t")
chm13Ref = data.frame("Chr"=chm13RefSize$V1, "Start"=rep(1, nrow(chm13RefSize)), "End"=chm13RefSize$V2, "fill"=rep("fcb06b", nrow(chm13RefSize)), "species"=rep("CHM13", nrow(chm13RefSize)), "size"=rep(12, nrow(chm13RefSize)), "color"=rep("fcb06b", nrow(chm13RefSize)))
hg38Ref = data.frame("Chr"=hg38RefSize$V1, "Start"=rep(1, nrow(hg38RefSize)), "End"=hg38RefSize$V2, "fill"=rep("078dd8", nrow(hg38RefSize)), "species"=rep("HG38", nrow(hg38RefSize)), "size"=rep(12, nrow(hg38RefSize)), "color"=rep("078dd8", nrow(hg38RefSize)))
hg19Ref = data.frame("Chr"=hg19RefSize$V1, "Start"=rep(1, nrow(hg19RefSize)), "End"=hg19RefSize$V2, "fill"=rep("139b08", nrow(hg19RefSize)), "species"=rep("HG19", nrow(hg19RefSize)), "size"=rep(12, nrow(hg19RefSize)), "color"=rep("139b08", nrow(hg19RefSize)))
hg38.chm13.ref = rbind(hg38Ref, chm13Ref)
hg19.chm13.ref = rbind(hg19Ref, chm13Ref)
hg19.hg38.chm13.ref = rbind(chm13Ref, hg19Ref, hg38Ref)
chm13_genes = read.table("chm13.v2.0.geneTable.txt", sep="\t", header=T, stringsAsFactors = F)
chm13_genes[which(chm13_genes$chr == "chrM"),"chr"] = "chrMT"
chm13_genes$ensembl = unlist(lapply(strsplit(chm13_genes$source_gene, "\\."), `[`, 1))
hg38_genes = read.table("hg38.v101.geneTable.txt", sep="\t", header=T, stringsAsFactors = F)
rownames(hg38_genes) = hg38_genes$gene_id
hg19_genes = read.table("hg19.v87.geneTable.txt", sep="\t", header=T, stringsAsFactors = F)
rownames(hg19_genes) = hg19_genes$gene_id
hg19_genes$chrAdded = paste0("chr", hg19_genes$chr)
hg38_genes$chrAdded = paste0("chr", hg38_genes$chr)
length(unique(chm13_genes$ensembl))
length(rownames(hg38_genes))
length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))
length(setdiff(unique(chm13_genes$ensembl), rownames(hg38_genes)))
length(setdiff(rownames(hg38_genes), unique(chm13_genes$ensembl)))
table(chm13_genes$chr)
hg38_v_chm13_chr = data.frame(ensembl=intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)), HG38_chr=rep(NA,length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))), CHM13_chr=rep(NA, length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))))
hg38_v_chm13_chr$HG38_chr=paste0("chr",hg38_genes[hg38_v_chm13_chr$ensembl, "chr"])
hg38_v_chm13_chr$CHM13_chr=sapply(1:nrow(hg38_v_chm13_chr), function(i) paste(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_chr[i, "ensembl"]),"chr"], collapse = ","))
nrow(hg38_v_chm13_chr[which(hg38_v_chm13_chr$HG38_chr == hg38_v_chm13_chr$CHM13_chr),])
nrow(hg38_v_chm13_chr[which(hg38_v_chm13_chr$HG38_chr != hg38_v_chm13_chr$CHM13_chr),])
hg38_genes$chrAdded = paste0("chr", hg38_genes$chr)
hg38_v_chm13_chr$Type = rep(NA, nrow(hg38_v_chm13_chr))
for(i in 1:nrow(hg38_v_chm13_chr)){
if(hg38_v_chm13_chr[i,"HG38_chr"] == hg38_v_chm13_chr[i,"CHM13_chr"]){
hg38_v_chm13_chr[i,"Type"] = "Same"
} else if(hg38_v_chm13_chr[i,"HG38_chr"] != hg38_v_chm13_chr[i,"CHM13_chr"] & length(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ","))) == 1){
hg38_v_chm13_chr[i,"Type"] = "NonSyntenicSingleCopy"
} else if(length(unique(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ",")))) == 1){
if(hg38_v_chm13_chr[i,"HG38_chr"] == unique(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ",")))){
hg38_v_chm13_chr[i,"Type"] = "SyntenicDuplications"
} else{
hg38_v_chm13_chr[i,"Type"] = "NonSyntenicMultipleCopies"
}
} else if(length(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ","))) > 1){
chrlist=unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ","))
if(hg38_v_chm13_chr[i,"HG38_chr"] %in% chrlist){
hg38_v_chm13_chr[i,"Type"] = "SyntenicAndNonSyntenicDuplications"
} else{
hg38_v_chm13_chr[i,"Type"] = "NonSyntenicMultipleCopies"
}
} else {
hg38_v_chm13_chr[i,"Type"] = "NA"
}
}
#hg38_v_chm13_chr$ChrChange = ifelse( hg38_v_chm13_chr$HG38_chr == hg38_v_chm13_chr$CHM13_chr, "Same", ifelse(hg38_v_chm13_chr$HG38_chr != hg38_v_chm13_chr$CHM13_chr & !grepl(",", hg38_v_chm13_chr$CHM13_chr), "DiffChr", "MultipleCopies"))
#hg38_v_chm13_chr$ChrMultiCopyChange = sapply(1:nrow(hg38_v_chm13_chr), function(i) {if(hg38_v_chm13_chr[i, "ChrChange"] != "MultipleCopies"){return("noCopies")}else{if(hg38_v_chm13_chr[i, "HG38_chr"] == unique(unlist(strsplit(hg38_v_chm13_chr[i, "CHM13_chr"], ",")))){return("SameCopy")}else{if(!hg38_v_chm13_chr[i, "HG38_chr"] %in% unique(unlist(strsplit(hg38_v_chm13_chr[i, "CHM13_chr"], ",")))){"JumpingCopy"}else{"SameAndDiff"}}}})
#table(hg38_v_chm13_chr$ChrChange)
#table(hg38_v_chm13_chr$ChrMultiCopyChange)
table(hg38_v_chm13_chr$Type)
circosCoord = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$HG38_chr != hg38_v_chm13_chr$CHM13_chr),"ensembl"]){
chm13Target=which(chm13_genes$ensembl == ensg)
for(i in chm13Target){
if(hg38_genes[ensg,"chrAdded"] != chm13_genes[i,"chr"]){
row=NULL
row$source_chr=hg38_genes[ensg,"chrAdded"]
row$source_start=hg38_genes[ensg,"start"]
row$source_end=hg38_genes[ensg,"end"]
row$target_chr=chm13_genes[i,"chr"]
row$target_start=chm13_genes[i,"start"]
row$target_end=chm13_genes[i,"end"]
circosCoord = rbind(circosCoord, row)
}
}
}
write.table(circosCoord, file="HG38_V_CHM13_jumpingGenes.ChordCircos.txt", quote = F, row.names = F, sep="\t")
circosCoord = as.data.frame(circosCoord)
hg38.v.chm13.jumpingGenes = data.frame("Species_1"=unname(unlist(circosCoord$source_chr)), "Start_1"=unname(unlist(circosCoord$source_start)), "End_1"=unname(unlist(circosCoord$source_end)), "Species_2"=unname(unlist(circosCoord$target_chr)), "Start_2"=unname(unlist(circosCoord$target_start)), "End_2"=unname(unlist(circosCoord$target_end)), "fill" = rep("cccccc", nrow(circosCoord)))
hg38.v.chm13.jumpingGenes$Species_1 = sapply(1:nrow(hg38.v.chm13.jumpingGenes), function(i) which(hg38RefSize$V1 == as.character(hg38.v.chm13.jumpingGenes[i,"Species_1"])))
hg38.v.chm13.jumpingGenes$Species_2 = unlist(sapply(1:nrow(hg38.v.chm13.jumpingGenes), function(i) which(chm13RefSize$V1 == as.character(hg38.v.chm13.jumpingGenes[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38.v.chm13.jumpingGenes, output = "HG38.v.CHM13.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.SyntenyPlot.png")
hg38_chm13_SingleCopyDiffCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "NonSyntenicSingleCopy"), "ensembl"]) {
hg38_chm13_SingleCopyDiffCHR = rbind(hg38_chm13_SingleCopyDiffCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[which(chm13_genes$ensembl == ensg),"chr"], chm13_genes[which(chm13_genes$ensembl == ensg),"start"], chm13_genes[which(chm13_genes$ensembl == ensg),"end"], "cccccc"))
}
hg38_chm13_SingleCopyDiffCHR = data.frame(hg38_chm13_SingleCopyDiffCHR, stringsAsFactors = F)
colnames(hg38_chm13_SingleCopyDiffCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_SingleCopyDiffCHR$Start_1 = as.numeric(hg38_chm13_SingleCopyDiffCHR$Start_1)
hg38_chm13_SingleCopyDiffCHR$End_1= as.numeric(hg38_chm13_SingleCopyDiffCHR$End_1)
hg38_chm13_SingleCopyDiffCHR$Start_2 = as.numeric(hg38_chm13_SingleCopyDiffCHR$Start_2)
hg38_chm13_SingleCopyDiffCHR$End_2 = as.numeric(hg38_chm13_SingleCopyDiffCHR$End_2)
hg38_chm13_SingleCopyDiffCHR$Species_1 = sapply(1:nrow(hg38_chm13_SingleCopyDiffCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_SingleCopyDiffCHR[i,"Species_1"])))
hg38_chm13_SingleCopyDiffCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_SingleCopyDiffCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_SingleCopyDiffCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_SingleCopyDiffCHR, output = "HG38.v.CHM13.JumpingGene.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.JumpingGene.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.JumpingGene.SyntenyPlot.png")
hg38_chm13_CopyDiffCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "NonSyntenicMultipleCopies"), "ensembl"]) {
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_chm13_CopyDiffCHR = rbind(hg38_chm13_CopyDiffCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], "cccccc"))
}
}
hg38_chm13_CopyDiffCHR = data.frame(hg38_chm13_CopyDiffCHR, stringsAsFactors = F)
colnames(hg38_chm13_CopyDiffCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_CopyDiffCHR$Start_1 = as.numeric(hg38_chm13_CopyDiffCHR$Start_1)
hg38_chm13_CopyDiffCHR$End_1= as.numeric(hg38_chm13_CopyDiffCHR$End_1)
hg38_chm13_CopyDiffCHR$Start_2 = as.numeric(hg38_chm13_CopyDiffCHR$Start_2)
hg38_chm13_CopyDiffCHR$End_2 = as.numeric(hg38_chm13_CopyDiffCHR$End_2)
hg38_chm13_CopyDiffCHR$Species_1 = sapply(1:nrow(hg38_chm13_CopyDiffCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_CopyDiffCHR[i,"Species_1"])))
hg38_chm13_CopyDiffCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_CopyDiffCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_CopyDiffCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_CopyDiffCHR, output = "HG38.v.CHM13.MultipleCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.MultipleCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.MultipleCopies.SyntenyPlot.png")
hg38_chm13_CopysameAndDiffCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "SyntenicAndNonSyntenicDuplications"), "ensembl"]) {
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_chm13_CopysameAndDiffCHR = rbind(hg38_chm13_CopysameAndDiffCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], "cccccc"))
}
}
hg38_chm13_CopysameAndDiffCHR = data.frame(hg38_chm13_CopysameAndDiffCHR, stringsAsFactors = F)
colnames(hg38_chm13_CopysameAndDiffCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_CopysameAndDiffCHR$Start_1 = as.numeric(hg38_chm13_CopysameAndDiffCHR$Start_1)
hg38_chm13_CopysameAndDiffCHR$End_1= as.numeric(hg38_chm13_CopysameAndDiffCHR$End_1)
hg38_chm13_CopysameAndDiffCHR$Start_2 = as.numeric(hg38_chm13_CopysameAndDiffCHR$Start_2)
hg38_chm13_CopysameAndDiffCHR$End_2 = as.numeric(hg38_chm13_CopysameAndDiffCHR$End_2)
hg38_chm13_CopysameAndDiffCHR$Species_1 = sapply(1:nrow(hg38_chm13_CopysameAndDiffCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_CopysameAndDiffCHR[i,"Species_1"])))
hg38_chm13_CopysameAndDiffCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_CopysameAndDiffCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_CopysameAndDiffCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_CopysameAndDiffCHR, output = "HG38.v.CHM13.SameAndDiffCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.SameAndDiffCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.SameAndDiffCopies.SyntenyPlot.png")
hg38_chm13_CopySameCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "SyntenicDuplications"), "ensembl"]) {
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_chm13_CopySameCHR = rbind(hg38_chm13_CopySameCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], "cccccc"))
}
}
hg38_chm13_CopySameCHR = data.frame(hg38_chm13_CopySameCHR, stringsAsFactors = F)
colnames(hg38_chm13_CopySameCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_CopySameCHR$Start_1 = as.numeric(hg38_chm13_CopySameCHR$Start_1)
hg38_chm13_CopySameCHR$End_1= as.numeric(hg38_chm13_CopySameCHR$End_1)
hg38_chm13_CopySameCHR$Start_2 = as.numeric(hg38_chm13_CopySameCHR$Start_2)
hg38_chm13_CopySameCHR$End_2 = as.numeric(hg38_chm13_CopySameCHR$End_2)
hg38_chm13_CopySameCHR$Species_1 = sapply(1:nrow(hg38_chm13_CopySameCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_CopySameCHR[i,"Species_1"])))
hg38_chm13_CopySameCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_CopySameCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_CopySameCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_CopySameCHR, output = "HG38.v.CHM13.SameChrCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.SameChrCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.SameChrCopies.SyntenyPlot.png")
merged_hg38_chm13Diff=rbind(hg38_chm13_SingleCopyDiffCHR, hg38_chm13_CopyDiffCHR, hg38_chm13_CopysameAndDiffCHR, hg38_chm13_CopySameCHR)
merged_hg38_chm13Diff$Type = c(rep("JumpingGene", nrow(hg38_chm13_SingleCopyDiffCHR)), rep("JumpingCopy", nrow(hg38_chm13_CopyDiffCHR)), rep("SameAndDiffCopy", nrow(hg38_chm13_CopysameAndDiffCHR)), rep("SameCHRCopy", nrow(hg38_chm13_CopySameCHR)))
pheatmap(log10(table(merged_hg38_chm13Diff[,c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="All Copies")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Species_1 != merged_hg38_chm13Diff$Species_2),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="All Copies, No Same CHR", )
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type != "SameCHRCopy"),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="No SameCHRCopy")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "JumpingGene"),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="JumpingGene")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "JumpingCopy"),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="JumpingCopy")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "SameAndDiffCopy"), c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="SameAndDiffCopy With Same CHR")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "SameAndDiffCopy" & merged_hg38_chm13Diff$Species_1 != merged_hg38_chm13Diff$Species_2),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="SameAndDiffCopy With Only Diff CHR")
mergedTable = melt(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Species_1 != merged_hg38_chm13Diff$Species_2),c(1,4)]))
mergedTable = mergedTable[which(mergedTable$value > 0),]
mergedTable = mergedTable[order(mergedTable$value),]
Eventcolors=gsub("#","",colorRampPalette(c("honeydew","red"))(max(mergedTable$value)))
hg38_chm13_jumpingGenes_copy = NULL
for(i in 1:nrow(mergedTable)){
hg38_chrom=mergedTable[i, "Species_1"]
chm13_chrom=mergedTable[i, "Species_2"]
hg38_half=as.integer(hg38RefSize[hg38_chrom,"V2"]/2)
chm13_half=as.integer(chm13RefSize[chm13_chrom,"V2"]/2)
Start_1=hg38_half
Start_2=chm13_half
End_1=Start_1+100000
End_2=Start_2+100000
hg38_chm13_jumpingGenes_copy = rbind(hg38_chm13_jumpingGenes_copy, c(hg38_chrom, Start_1, End_1, chm13_chrom, Start_2, End_2 , Eventcolors[mergedTable[i, "value"]]))
for(j in 2:mergedTable[i,"value"]*10){
Start_1=Start_1+500000
Start_2=Start_2+500000
End_1=End_1+500000
End_2=End_2+500000
hg38_chm13_jumpingGenes_copy = rbind(hg38_chm13_jumpingGenes_copy, c(hg38_chrom, Start_1, End_1, chm13_chrom, Start_2, End_2 , Eventcolors[mergedTable[i, "value"]]))
}
}
hg38_chm13_jumpingGenes_copy = as.data.frame(hg38_chm13_jumpingGenes_copy)
colnames(hg38_chm13_jumpingGenes_copy) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_jumpingGenes_copy$Species_1 = as.numeric(hg38_chm13_jumpingGenes_copy$Species_1)
hg38_chm13_jumpingGenes_copy$Start_1 = as.numeric(hg38_chm13_jumpingGenes_copy$Start_1)
hg38_chm13_jumpingGenes_copy$End_1 = as.numeric(hg38_chm13_jumpingGenes_copy$End_1)
hg38_chm13_jumpingGenes_copy$Species_2 = as.numeric(hg38_chm13_jumpingGenes_copy$Species_2)
hg38_chm13_jumpingGenes_copy$Start_2 = as.numeric(hg38_chm13_jumpingGenes_copy$Start_2)
hg38_chm13_jumpingGenes_copy$End_2 = as.numeric(hg38_chm13_jumpingGenes_copy$End_2)
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_jumpingGenes_copy, output = "HG38.v.CHM13.CountsOfCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.CountsOfCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.CountsOfCopies.SyntenyPlot.png")
hg38_v_chm13_strand = data.frame(ensembl=intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)), HG38_strand=rep(NA,length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))), CHM13_strand=rep(NA, length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))))
hg38_v_chm13_strand$HG38_strand=hg38_genes[hg38_v_chm13_strand$ensembl, "strand"]
hg38_v_chm13_strand$CHM13_strand=sapply(1:nrow(hg38_v_chm13_strand), function(i) paste(unique(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i, "ensembl"]),"strand"]), collapse = ","))
hg38_v_chm13_strand$CHM13_NumCopies=sapply(1:nrow(hg38_v_chm13_strand), function(i) length(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i, "ensembl"]),"strand"]))
table(hg38_v_chm13_strand[,2:3])
hg38_v_chm13_strand$Type = hg38_v_chm13_chr$Type
table(hg38_v_chm13_strand[,5])
table(hg38_v_chm13_strand[,c(2,3,5)])
write.table(hg38_v_chm13_strand, file="Hg38_vs_chm13_strandDiff.txt", quote=F, sep = "\t", row.names = F)
ggplot(hg38_v_chm13_strand, aes(x=CHM13_NumCopies, color=Type)) + geom_density()
hg38_v_chm13_strand$GeneName = as.character(sapply(1:nrow(hg38_v_chm13_strand), function(i) hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"gene_name"]))
hg38_v_chm13_strand$Biotype = as.character(apply(1:nrow(hg38_v_chm13_strand), function(i) hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"gene_biotype"]))
hg38_v_chm13_strand$Biotype = as.character(apply(1:nrow(hg38_v_chm13_strand), function(i) hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"gene_biotype"]))
head(hg38_genes)
head(hg38_v_chm13_strand)
hg38_v_chm13_strand[which(hg38_v_chm13_strand$CHM13_NumCopies>1),]
nrow(hg38_v_chm13_strand[which(hg38_v_chm13_strand$CHM13_NumCopies>1),])
# Biotype
## Illumina250RL
### CHM13
Illumina250.CHM13.darkMerged = read.table("data/Illumina250_CHM13/Updated_Output_01_18_2024/Illumina250.Illumina250.T2T_CHM13_v2.0.dark-merged.bed", sep="\t", stringsAsFactors = F, header=F)
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(ggplot2)
library(gridExtra)
library(RIdeogram)
CHM13_Cytoband = read.table("../1Kb_HG38_blat_CHM13/chm13v2.0_cytobands_allchrs.bed", header=T, sep="\t", stringsAsFactors = F)
CHM13 = CHM13_Cytoband[,1:3]
CHM13$fill = rep(969696, nrow(CHM13))
CHM13$species = rep("CHM13", nrow(CHM13))
CHM13$size= rep(12, nrow(CHM13))
CHM13$color = rep(252525, nrow(CHM13))
HG38_Cytoband = read.table("../1Kb_HG38_blat_CHM13/hg38.assembledOnly.chrom.sizes", header=F, sep="\t", stringsAsFactors = F)
HG38_Cytoband$Start = rep(0, nrow(HG38_Cytoband))
HG38=HG38_Cytoband[,c("V1", "Start", "V2")]
colnames(HG38) = c("Chr", "Start", "End")
HG38$fill = rep(969696, nrow(HG38))
HG38$species = rep("HG38", nrow(HG38))
HG38$size= rep(12, nrow(HG38))
HG38$color = rep(252525, nrow(HG38))
HG38.vs.CHM13=rbind(HG38, CHM13)
comp = read.table("Liftover.vs.Blat.Counts.txt", header=T, sep="\t", stringsAsFactors = F)
hist(log10(comp[,3]+1))
overlap=read.table("Liftover.vs.Blat.OverlapOutput.txt", header=F, sep="\t", stringsAsFactors = F)
nrow(overlap)
liftoverOverlap = read.table("Liftover.vs.Blat.OverlapOutput_LiftoverMerged.txt", header=F, sep="\t", stringsAsFactors = F)
liftoverOverlap$value = rep(6, nrow(liftoverOverlap))
colnames(liftoverOverlap) = c("Chr","Start","End","Value")
ideogram(CHM13_Cytoband, output="CHM13_LiftoverOverlap.svg", overlaid=liftoverOverlap)
convertSVG("CHM13_LiftoverOverlap.svg", device = "png", file = "CHM13_LiftoverOverlap.png")
window.vs.blat = read.table("Liftover.vs.Blat.nonOverlapOutput.HG38_to_chm13Blat.IdeogramFile.txt", header=F, sep="\t", stringsAsFactors = F)
window.vs.blat$fill = rep("cccccc", nrow(window.vs.blat))
colnames(window.vs.blat) = c("Species_1","Start_1","End_1","Species_2","Start_2","End_2","fill")
window.vs.blat$Species_1 = gsub("chr", "", window.vs.blat$Species_1)
window.vs.blat$Species_1 = gsub("X", "23", window.vs.blat$Species_1)
window.vs.blat$Species_1 = gsub("Y", "24", window.vs.blat$Species_1)
window.vs.blat$Species_1 = as.numeric(as.character(window.vs.blat$Species_1))
window.vs.blat$Species_2 = gsub("chr", "", window.vs.blat$Species_2)
window.vs.blat$Species_2 = gsub("X", "23", window.vs.blat$Species_2)
window.vs.blat$Species_2 = gsub("Y", "24", window.vs.blat$Species_2)
window.vs.blat$Species_2 = as.numeric(window.vs.blat$Species_2)
window.vs.liftover = read.table("Liftover.vs.Blat.nonOverlapOutput.HG38_to_chm13Liftover.IdeogramFile.txt", header=F, sep="\t", stringsAsFactors = F)
window.vs.liftover$fill = rep("cccccc", nrow(window.vs.liftover))
colnames(window.vs.liftover) = c("Species_1","Start_1","End_1","Species_2","Start_2","End_2","fill")
window.vs.liftover$Species_1 = gsub("chr", "", window.vs.liftover$Species_1)
window.vs.liftover$Species_1 = gsub("X", "23", window.vs.liftover$Species_1)
window.vs.liftover$Species_1 = gsub("Y", "24", window.vs.liftover$Species_1)
window.vs.liftover$Species_1 = as.numeric(as.character(window.vs.liftover$Species_1))
window.vs.liftover$Species_2 = gsub("chr", "", window.vs.liftover$Species_2)
window.vs.liftover$Species_2 = gsub("X", "23", window.vs.liftover$Species_2)
window.vs.liftover$Species_2 = gsub("Y", "24", window.vs.liftover$Species_2)
window.vs.liftover$Species_2 = as.numeric(window.vs.liftover$Species_2)
window.vs.liftover.chr1 = window.vs.liftover[which(window.vs.liftover$Species_1 == 1),]
ideogram(HG38.vs.CHM13, output="HG38Window.vs.CHM13_Liftover.chr1.svg", synteny=window.vs.liftover.chr1)
convertSVG("HG38Window.vs.CHM13_Liftover.chr1.svg", device = "png", file = "HG38Window.vs.CHM13_Liftover.chr1.png")
window.vs.blat.chr1 = window.vs.blat[which(window.vs.blat$Species_1 == 1 & window.vs.blat$Species_2 == 1),]
ideogram(HG38.vs.CHM13, output="HG38Window.vs.CHM13_blat.chr1.svg", synteny=window.vs.blat.chr1)
convertSVG("HG38Window.vs.CHM13_blat.chr1.svg", device = "png", file = "HG38Window.vs.CHM13_blat.chr1.png")
window.vs.blat.chr1.vs.others = window.vs.blat[which(window.vs.blat$Species_1 == 1 & window.vs.blat$Species_2 != 1),]
ideogram(HG38.vs.CHM13, output="HG38Window.vs.CHM13_blat.chr1.svg", synteny=window.vs.blat.chr1.vs.others)
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
library(reshape2)
library(ggplot2)
library(ComplexHeatmap)
library(RIdeogram)
library(wordcloud2)
chm13RefSize = read.table("../../../CHM13PaperFigures/referenceSizes/CHM13.chromSizes.txt", header=F,sep="\t")
chm13RefSize[which(chm13RefSize$V1 == "chrM"), "V1"] = "chrMT"
hg38RefSize = read.table("../../../CHM13PaperFigures/referenceSizes/hg38.assembledOnly.chrom.sizes", header=F,sep="\t")
hg38RefSize[which(hg38RefSize$V1 == "chrM"), "V1"] = "chrMT"
hg19RefSize = read.table("../../../CHM13PaperFigures/referenceSizes/hg19.assembledOnly.chrom.sizes", header=F,sep="\t")
chm13Ref = data.frame("Chr"=chm13RefSize$V1, "Start"=rep(1, nrow(chm13RefSize)), "End"=chm13RefSize$V2, "fill"=rep("fcb06b", nrow(chm13RefSize)), "species"=rep("CHM13", nrow(chm13RefSize)), "size"=rep(12, nrow(chm13RefSize)), "color"=rep("fcb06b", nrow(chm13RefSize)))
hg38Ref = data.frame("Chr"=hg38RefSize$V1, "Start"=rep(1, nrow(hg38RefSize)), "End"=hg38RefSize$V2, "fill"=rep("078dd8", nrow(hg38RefSize)), "species"=rep("HG38", nrow(hg38RefSize)), "size"=rep(12, nrow(hg38RefSize)), "color"=rep("078dd8", nrow(hg38RefSize)))
hg19Ref = data.frame("Chr"=hg19RefSize$V1, "Start"=rep(1, nrow(hg19RefSize)), "End"=hg19RefSize$V2, "fill"=rep("139b08", nrow(hg19RefSize)), "species"=rep("HG19", nrow(hg19RefSize)), "size"=rep(12, nrow(hg19RefSize)), "color"=rep("139b08", nrow(hg19RefSize)))
hg38.chm13.ref = rbind(hg38Ref, chm13Ref)
hg19.chm13.ref = rbind(hg19Ref, chm13Ref)
hg19.hg38.chm13.ref = rbind(chm13Ref, hg19Ref, hg38Ref)
chm13_genes = read.table("chm13.v2.0.geneTable.txt", sep="\t", header=T, stringsAsFactors = F)
chm13_genes[which(chm13_genes$chr == "chrM"),"chr"] = "chrMT"
chm13_genes$ensembl = unlist(lapply(strsplit(chm13_genes$source_gene, "\\."), `[`, 1))
hg38_genes = read.table("hg38.v101.geneTable.txt", sep="\t", header=T, stringsAsFactors = F)
rownames(hg38_genes) = hg38_genes$gene_id
hg19_genes = read.table("hg19.v87.geneTable.txt", sep="\t", header=T, stringsAsFactors = F)
rownames(hg19_genes) = hg19_genes$gene_id
hg19_genes$chrAdded = paste0("chr", hg19_genes$chr)
hg38_genes$chrAdded = paste0("chr", hg38_genes$chr)
length(unique(chm13_genes$ensembl))
length(rownames(hg38_genes))
length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))
length(setdiff(unique(chm13_genes$ensembl), rownames(hg38_genes)))
length(setdiff(rownames(hg38_genes), unique(chm13_genes$ensembl)))
table(chm13_genes$chr)
hg38_v_chm13_chr = data.frame(ensembl=intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)), HG38_chr=rep(NA,length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))), CHM13_chr=rep(NA, length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))))
hg38_v_chm13_chr$HG38_chr=paste0("chr",hg38_genes[hg38_v_chm13_chr$ensembl, "chr"])
hg38_v_chm13_chr$CHM13_chr=sapply(1:nrow(hg38_v_chm13_chr), function(i) paste(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_chr[i, "ensembl"]),"chr"], collapse = ","))
nrow(hg38_v_chm13_chr[which(hg38_v_chm13_chr$HG38_chr == hg38_v_chm13_chr$CHM13_chr),])
nrow(hg38_v_chm13_chr[which(hg38_v_chm13_chr$HG38_chr != hg38_v_chm13_chr$CHM13_chr),])
hg38_genes$chrAdded = paste0("chr", hg38_genes$chr)
hg38_v_chm13_chr$Type = rep(NA, nrow(hg38_v_chm13_chr))
for(i in 1:nrow(hg38_v_chm13_chr)){
if(hg38_v_chm13_chr[i,"HG38_chr"] == hg38_v_chm13_chr[i,"CHM13_chr"]){
hg38_v_chm13_chr[i,"Type"] = "Same"
} else if(hg38_v_chm13_chr[i,"HG38_chr"] != hg38_v_chm13_chr[i,"CHM13_chr"] & length(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ","))) == 1){
hg38_v_chm13_chr[i,"Type"] = "NonSyntenicSingleCopy"
} else if(length(unique(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ",")))) == 1){
if(hg38_v_chm13_chr[i,"HG38_chr"] == unique(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ",")))){
hg38_v_chm13_chr[i,"Type"] = "SyntenicDuplications"
} else{
hg38_v_chm13_chr[i,"Type"] = "NonSyntenicMultipleCopies"
}
} else if(length(unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ","))) > 1){
chrlist=unlist(strsplit(hg38_v_chm13_chr[i,"CHM13_chr"], ","))
if(hg38_v_chm13_chr[i,"HG38_chr"] %in% chrlist){
hg38_v_chm13_chr[i,"Type"] = "SyntenicAndNonSyntenicDuplications"
} else{
hg38_v_chm13_chr[i,"Type"] = "NonSyntenicMultipleCopies"
}
} else {
hg38_v_chm13_chr[i,"Type"] = "NA"
}
}
#hg38_v_chm13_chr$ChrChange = ifelse( hg38_v_chm13_chr$HG38_chr == hg38_v_chm13_chr$CHM13_chr, "Same", ifelse(hg38_v_chm13_chr$HG38_chr != hg38_v_chm13_chr$CHM13_chr & !grepl(",", hg38_v_chm13_chr$CHM13_chr), "DiffChr", "MultipleCopies"))
#hg38_v_chm13_chr$ChrMultiCopyChange = sapply(1:nrow(hg38_v_chm13_chr), function(i) {if(hg38_v_chm13_chr[i, "ChrChange"] != "MultipleCopies"){return("noCopies")}else{if(hg38_v_chm13_chr[i, "HG38_chr"] == unique(unlist(strsplit(hg38_v_chm13_chr[i, "CHM13_chr"], ",")))){return("SameCopy")}else{if(!hg38_v_chm13_chr[i, "HG38_chr"] %in% unique(unlist(strsplit(hg38_v_chm13_chr[i, "CHM13_chr"], ",")))){"JumpingCopy"}else{"SameAndDiff"}}}})
#table(hg38_v_chm13_chr$ChrChange)
#table(hg38_v_chm13_chr$ChrMultiCopyChange)
table(hg38_v_chm13_chr$Type)
circosCoord = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$HG38_chr != hg38_v_chm13_chr$CHM13_chr),"ensembl"]){
chm13Target=which(chm13_genes$ensembl == ensg)
for(i in chm13Target){
if(hg38_genes[ensg,"chrAdded"] != chm13_genes[i,"chr"]){
row=NULL
row$source_chr=hg38_genes[ensg,"chrAdded"]
row$source_start=hg38_genes[ensg,"start"]
row$source_end=hg38_genes[ensg,"end"]
row$target_chr=chm13_genes[i,"chr"]
row$target_start=chm13_genes[i,"start"]
row$target_end=chm13_genes[i,"end"]
circosCoord = rbind(circosCoord, row)
}
}
}
write.table(circosCoord, file="HG38_V_CHM13_jumpingGenes.ChordCircos.txt", quote = F, row.names = F, sep="\t")
circosCoord = as.data.frame(circosCoord)
hg38.v.chm13.jumpingGenes = data.frame("Species_1"=unname(unlist(circosCoord$source_chr)), "Start_1"=unname(unlist(circosCoord$source_start)), "End_1"=unname(unlist(circosCoord$source_end)), "Species_2"=unname(unlist(circosCoord$target_chr)), "Start_2"=unname(unlist(circosCoord$target_start)), "End_2"=unname(unlist(circosCoord$target_end)), "fill" = rep("cccccc", nrow(circosCoord)))
hg38.v.chm13.jumpingGenes$Species_1 = sapply(1:nrow(hg38.v.chm13.jumpingGenes), function(i) which(hg38RefSize$V1 == as.character(hg38.v.chm13.jumpingGenes[i,"Species_1"])))
hg38.v.chm13.jumpingGenes$Species_2 = unlist(sapply(1:nrow(hg38.v.chm13.jumpingGenes), function(i) which(chm13RefSize$V1 == as.character(hg38.v.chm13.jumpingGenes[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38.v.chm13.jumpingGenes, output = "HG38.v.CHM13.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.SyntenyPlot.png")
hg38_chm13_SingleCopyDiffCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "NonSyntenicSingleCopy"), "ensembl"]) {
hg38_chm13_SingleCopyDiffCHR = rbind(hg38_chm13_SingleCopyDiffCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[which(chm13_genes$ensembl == ensg),"chr"], chm13_genes[which(chm13_genes$ensembl == ensg),"start"], chm13_genes[which(chm13_genes$ensembl == ensg),"end"], "cccccc"))
}
hg38_chm13_SingleCopyDiffCHR = data.frame(hg38_chm13_SingleCopyDiffCHR, stringsAsFactors = F)
colnames(hg38_chm13_SingleCopyDiffCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_SingleCopyDiffCHR$Start_1 = as.numeric(hg38_chm13_SingleCopyDiffCHR$Start_1)
hg38_chm13_SingleCopyDiffCHR$End_1= as.numeric(hg38_chm13_SingleCopyDiffCHR$End_1)
hg38_chm13_SingleCopyDiffCHR$Start_2 = as.numeric(hg38_chm13_SingleCopyDiffCHR$Start_2)
hg38_chm13_SingleCopyDiffCHR$End_2 = as.numeric(hg38_chm13_SingleCopyDiffCHR$End_2)
hg38_chm13_SingleCopyDiffCHR$Species_1 = sapply(1:nrow(hg38_chm13_SingleCopyDiffCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_SingleCopyDiffCHR[i,"Species_1"])))
hg38_chm13_SingleCopyDiffCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_SingleCopyDiffCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_SingleCopyDiffCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_SingleCopyDiffCHR, output = "HG38.v.CHM13.JumpingGene.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.JumpingGene.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.JumpingGene.SyntenyPlot.png")
hg38_chm13_CopyDiffCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "NonSyntenicMultipleCopies"), "ensembl"]) {
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_chm13_CopyDiffCHR = rbind(hg38_chm13_CopyDiffCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], "cccccc"))
}
}
hg38_chm13_CopyDiffCHR = data.frame(hg38_chm13_CopyDiffCHR, stringsAsFactors = F)
colnames(hg38_chm13_CopyDiffCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_CopyDiffCHR$Start_1 = as.numeric(hg38_chm13_CopyDiffCHR$Start_1)
hg38_chm13_CopyDiffCHR$End_1= as.numeric(hg38_chm13_CopyDiffCHR$End_1)
hg38_chm13_CopyDiffCHR$Start_2 = as.numeric(hg38_chm13_CopyDiffCHR$Start_2)
hg38_chm13_CopyDiffCHR$End_2 = as.numeric(hg38_chm13_CopyDiffCHR$End_2)
hg38_chm13_CopyDiffCHR$Species_1 = sapply(1:nrow(hg38_chm13_CopyDiffCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_CopyDiffCHR[i,"Species_1"])))
hg38_chm13_CopyDiffCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_CopyDiffCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_CopyDiffCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_CopyDiffCHR, output = "HG38.v.CHM13.MultipleCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.MultipleCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.MultipleCopies.SyntenyPlot.png")
hg38_chm13_CopysameAndDiffCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "SyntenicAndNonSyntenicDuplications"), "ensembl"]) {
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_chm13_CopysameAndDiffCHR = rbind(hg38_chm13_CopysameAndDiffCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], "cccccc"))
}
}
hg38_chm13_CopysameAndDiffCHR = data.frame(hg38_chm13_CopysameAndDiffCHR, stringsAsFactors = F)
colnames(hg38_chm13_CopysameAndDiffCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_CopysameAndDiffCHR$Start_1 = as.numeric(hg38_chm13_CopysameAndDiffCHR$Start_1)
hg38_chm13_CopysameAndDiffCHR$End_1= as.numeric(hg38_chm13_CopysameAndDiffCHR$End_1)
hg38_chm13_CopysameAndDiffCHR$Start_2 = as.numeric(hg38_chm13_CopysameAndDiffCHR$Start_2)
hg38_chm13_CopysameAndDiffCHR$End_2 = as.numeric(hg38_chm13_CopysameAndDiffCHR$End_2)
hg38_chm13_CopysameAndDiffCHR$Species_1 = sapply(1:nrow(hg38_chm13_CopysameAndDiffCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_CopysameAndDiffCHR[i,"Species_1"])))
hg38_chm13_CopysameAndDiffCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_CopysameAndDiffCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_CopysameAndDiffCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_CopysameAndDiffCHR, output = "HG38.v.CHM13.SameAndDiffCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.SameAndDiffCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.SameAndDiffCopies.SyntenyPlot.png")
hg38_chm13_CopySameCHR = NULL
for(ensg in hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "SyntenicDuplications"), "ensembl"]) {
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_chm13_CopySameCHR = rbind(hg38_chm13_CopySameCHR, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], "cccccc"))
}
}
hg38_chm13_CopySameCHR = data.frame(hg38_chm13_CopySameCHR, stringsAsFactors = F)
colnames(hg38_chm13_CopySameCHR) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_CopySameCHR$Start_1 = as.numeric(hg38_chm13_CopySameCHR$Start_1)
hg38_chm13_CopySameCHR$End_1= as.numeric(hg38_chm13_CopySameCHR$End_1)
hg38_chm13_CopySameCHR$Start_2 = as.numeric(hg38_chm13_CopySameCHR$Start_2)
hg38_chm13_CopySameCHR$End_2 = as.numeric(hg38_chm13_CopySameCHR$End_2)
hg38_chm13_CopySameCHR$Species_1 = sapply(1:nrow(hg38_chm13_CopySameCHR), function(i) which(hg38RefSize$V1 == as.character(hg38_chm13_CopySameCHR[i,"Species_1"])))
hg38_chm13_CopySameCHR$Species_2 = unlist(sapply(1:nrow(hg38_chm13_CopySameCHR), function(i) which(chm13RefSize$V1 == as.character(hg38_chm13_CopySameCHR[i,"Species_2"]))))
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_CopySameCHR, output = "HG38.v.CHM13.SameChrCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.SameChrCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.SameChrCopies.SyntenyPlot.png")
merged_hg38_chm13Diff=rbind(hg38_chm13_SingleCopyDiffCHR, hg38_chm13_CopyDiffCHR, hg38_chm13_CopysameAndDiffCHR, hg38_chm13_CopySameCHR)
merged_hg38_chm13Diff$Type = c(rep("JumpingGene", nrow(hg38_chm13_SingleCopyDiffCHR)), rep("JumpingCopy", nrow(hg38_chm13_CopyDiffCHR)), rep("SameAndDiffCopy", nrow(hg38_chm13_CopysameAndDiffCHR)), rep("SameCHRCopy", nrow(hg38_chm13_CopySameCHR)))
pheatmap(log10(table(merged_hg38_chm13Diff[,c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="All Copies")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Species_1 != merged_hg38_chm13Diff$Species_2),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="All Copies, No Same CHR", )
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type != "SameCHRCopy"),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="No SameCHRCopy")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "JumpingGene"),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="JumpingGene")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "JumpingCopy"),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="JumpingCopy")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "SameAndDiffCopy"), c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="SameAndDiffCopy With Same CHR")
pheatmap(log10(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Type == "SameAndDiffCopy" & merged_hg38_chm13Diff$Species_1 != merged_hg38_chm13Diff$Species_2),c(1,4)]) + 1), cluster_rows = F, cluster_cols = F, colorRampPalette(c("navy","white", "firebrick3"))(20), main="SameAndDiffCopy With Only Diff CHR")
mergedTable = melt(table(merged_hg38_chm13Diff[which(merged_hg38_chm13Diff$Species_1 != merged_hg38_chm13Diff$Species_2),c(1,4)]))
mergedTable = mergedTable[which(mergedTable$value > 0),]
mergedTable = mergedTable[order(mergedTable$value),]
Eventcolors=gsub("#","",colorRampPalette(c("honeydew","red"))(max(mergedTable$value)))
hg38_chm13_jumpingGenes_copy = NULL
for(i in 1:nrow(mergedTable)){
hg38_chrom=mergedTable[i, "Species_1"]
chm13_chrom=mergedTable[i, "Species_2"]
hg38_half=as.integer(hg38RefSize[hg38_chrom,"V2"]/2)
chm13_half=as.integer(chm13RefSize[chm13_chrom,"V2"]/2)
Start_1=hg38_half
Start_2=chm13_half
End_1=Start_1+100000
End_2=Start_2+100000
hg38_chm13_jumpingGenes_copy = rbind(hg38_chm13_jumpingGenes_copy, c(hg38_chrom, Start_1, End_1, chm13_chrom, Start_2, End_2 , Eventcolors[mergedTable[i, "value"]]))
for(j in 2:mergedTable[i,"value"]*10){
Start_1=Start_1+500000
Start_2=Start_2+500000
End_1=End_1+500000
End_2=End_2+500000
hg38_chm13_jumpingGenes_copy = rbind(hg38_chm13_jumpingGenes_copy, c(hg38_chrom, Start_1, End_1, chm13_chrom, Start_2, End_2 , Eventcolors[mergedTable[i, "value"]]))
}
}
hg38_chm13_jumpingGenes_copy = as.data.frame(hg38_chm13_jumpingGenes_copy)
colnames(hg38_chm13_jumpingGenes_copy) = c("Species_1", "Start_1", "End_1", "Species_2", "Start_2", "End_2", "fill")
hg38_chm13_jumpingGenes_copy$Species_1 = as.numeric(hg38_chm13_jumpingGenes_copy$Species_1)
hg38_chm13_jumpingGenes_copy$Start_1 = as.numeric(hg38_chm13_jumpingGenes_copy$Start_1)
hg38_chm13_jumpingGenes_copy$End_1 = as.numeric(hg38_chm13_jumpingGenes_copy$End_1)
hg38_chm13_jumpingGenes_copy$Species_2 = as.numeric(hg38_chm13_jumpingGenes_copy$Species_2)
hg38_chm13_jumpingGenes_copy$Start_2 = as.numeric(hg38_chm13_jumpingGenes_copy$Start_2)
hg38_chm13_jumpingGenes_copy$End_2 = as.numeric(hg38_chm13_jumpingGenes_copy$End_2)
ideogram(karyotype = hg38.chm13.ref, synteny = hg38_chm13_jumpingGenes_copy, output = "HG38.v.CHM13.CountsOfCopies.SyntenyPlot.svg")
convertSVG("HG38.v.CHM13.CountsOfCopies.SyntenyPlot.svg", device = "png", file = "HG38.v.CHM13.CountsOfCopies.SyntenyPlot.png")
hg38_v_chm13_strand = data.frame(ensembl=intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)), HG38_strand=rep(NA,length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))), CHM13_strand=rep(NA, length(intersect(unique(chm13_genes$ensembl), rownames(hg38_genes)))))
hg38_v_chm13_strand$HG38_strand=hg38_genes[hg38_v_chm13_strand$ensembl, "strand"]
hg38_v_chm13_strand$CHM13_strand=sapply(1:nrow(hg38_v_chm13_strand), function(i) paste(unique(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i, "ensembl"]),"strand"]), collapse = ","))
hg38_v_chm13_strand$CHM13_NumCopies=sapply(1:nrow(hg38_v_chm13_strand), function(i) length(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i, "ensembl"]),"strand"]))
table(hg38_v_chm13_strand[,2:3])
hg38_v_chm13_strand$Type = hg38_v_chm13_chr$Type
table(hg38_v_chm13_strand[,5])
table(hg38_v_chm13_strand[,c(2,3,5)])
write.table(hg38_v_chm13_strand, file="Hg38_vs_chm13_strandDiff.txt", quote=F, sep = "\t", row.names = F)
ggplot(hg38_v_chm13_strand, aes(x=CHM13_NumCopies, color=Type)) + geom_density()
hg38_v_chm13_strand$GeneName = as.character(sapply(1:nrow(hg38_v_chm13_strand), function(i) hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"gene_name"]))
hg38_v_chm13_strand$Biotype = as.character(sapply(1:nrow(hg38_v_chm13_strand), function(i) hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"gene_biotype"]))
hg38_v_chm13_strand$HG38_Pos = sapply(1:nrow(hg38_v_chm13_strand), function(i) paste(hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"chr"], paste(hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"start"], hg38_genes[which(hg38_genes$gene_id == hg38_v_chm13_strand[i,"ensembl"]),"end"], sep="-"), sep=":") )
hg38_v_chm13_strand$CHM13_Pos = sapply(1:nrow(hg38_v_chm13_strand), function(i) paste(paste(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i,"ensembl"]),"chr"], paste(chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i,"ensembl"]),"start"], chm13_genes[which(chm13_genes$ensembl == hg38_v_chm13_strand[i,"ensembl"]),"end"], sep="-"), sep=":"), collapse = ";"))
write.table(hg38_v_chm13_strand, file="Hg38_vs_chm13_strandDiff_WithAnnotations.txt", row.names = F, sep="\t", quote=F)
hg38_genes_vs_chm13_genes=NULL
for(ensg in hg38_genes$gene_id){
chm13Rows = which(chm13_genes$ensembl == ensg)
for(i in chm13Rows){
hg38_genes_vs_chm13_genes = rbind(hg38_genes_vs_chm13_genes, c(hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], hg38_genes[ensg, "strand"], hg38_genes[ensg, "chrAdded"], hg38_genes[ensg, "start"], hg38_genes[ensg, "end"], hg38_genes[ensg, "strand"], chm13_genes[i,"chr"], chm13_genes[i,"start"], chm13_genes[i,"end"], chm13_genes[i,"strand"], ensg, hg38_genes[ensg,"gene_biotype"], hg38_genes[ensg, "gene_name"]))
}
}
hg38_genes_vs_chm13_genes = as.data.frame(hg38_genes_vs_chm13_genes)
colnames(hg38_genes_vs_chm13_genes) = c("hg38_chr", "hg38_start", "hg38_end", "hg38_strand", "hg38_chr", "hg38_start", "hg38_end", "hg38_strand", "chm13_chr", "chm13_start", "chm13_end", "chm13_strand", "ensembl", "biotype", "gene_name")
ggplot(hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type == "JumpingGene"),], aes(x=log10(as.numeric(hg38_mapqNumBase)+1), y=log10(as.numeric(chm13_mapqNumBase)+1))) + geom_point() + ylim(c(-1,1))
head(hg38_v_chm13_chr)
dim(hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type != "Same"),])
VView(hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type != "Same"),])
View(hg38_v_chm13_chr[which(hg38_v_chm13_chr$Type != "Same"),])
library(ggplot2)
MAPT_Reads = fread("MAPT_H1_H2_Aligned2ONTReads.HG38Aligned.sorted.merged.txt", header=F, sep="\t")
library(data.table)
MAPT_Reads = fread("MAPT_H1_H2_Aligned2ONTReads.HG38Aligned.sorted.merged.txt", header=F, sep="\t")
source("~/Documents/EbbertLab/CHM13PaperFigures/DRF_PaperApp_V2/DarkRegionApp.R", echo=TRUE)
